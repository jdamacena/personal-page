[
  
   
      {
        "title"    : "5 steps to Defensive Programming",
        "category" : "",
        "tags"     : " Code, Unit Tests, Programming",
        "url"      : "/teste/steps-to-defensive-programming",
        "date"     : "September 6, 2018",
        "excerpt"  : "<p>Defensive Programming ensures that a program will continue to work under unforeseen circumstances and usages. It is above all a way of thinking, of working, that consists of<!--more--> writing code waiting for the worst to happen. This kind of ...",
        "content"  : "<p>Defensive Programming ensures that a program will continue to work under unforeseen circumstances and usages. It is above all a way of thinking, of working, that consists of<!--more--> writing code waiting for the worst to happen. This kind of programming is defined as “a kind of defensive design thought to ensure that the system will continue to work under unforeseen circumstances.” The approach is a must in projects where the high availability, the consistency or the security are necessary. In this post, we’ll see some steps to take to adopt this philosophy of work.</p>\n\n<h2 id=\"1---never-trust-data-entered-by-the--users\">1 - Never trust data entered by the  users</h2>\n\n<p>Always be prepared to receive some unexpected things. You should be aware of the data that your users put into the system, it must be validated to see if it’s according to the expected. In fact, you should be aware of <em>all data</em> that enters the system. Although validating the data after the user types it is a must, it’s also good to not let them type anything wrong in the first place (e.g. typing a negative number on an Age field). This kind of approach, preparing for unforeseen situations, is at the core of defensive programming.</p>\n\n<h2 id=\"2---do-not-reinvent-the-wheel\">2 - Do <em>not</em> reinvent the wheel</h2>\n\n<p><img src=\"/teste/assets/img/posts/reinventing-the-wheel.jpg\" alt=\"Do not reinvent the wheel\" title=\"Do not reinvent the wheel\" /></p>\n\n<p>Write your own code or use a third-party library (or package)? If you find a well-maintained library that suits your needs, it’s often a good idea to go with it. Usually, third-party libraries are tested and approved by hundreds or even thousands of developers, it’s updated with no extra effort (not your effort), it’s more mature, optimized, and the list goes on. Besides, it’s already there, why would you do a job that’s already done?</p>\n\n<h2 id=\"3---dont-trust-the-developers\">3 - Don’t trust the developers</h2>\n\n<p>Defensive programming has a lot in common with the concept of Defensive Driving. Defensive Driving says that everyone is susceptible to make mistakes, and therefore, one driver should pay attention not only to his or her own car but in the other drivers and the surroundings too. On Defensive Programming, this concept can be applied by making peer reviews. Peer Review is when a developer writes some functionality and then hands it to another developer for them to see if the code that the first one wrote is correct and in accordance to the standards of the project or organization they are in.</p>\n\n<h2 id=\"4---write-a-solid-code\">4 - Write a SOLID code</h2>\n\n<p><img src=\"/teste/assets/img/posts/solid-strategy.jpg\" alt=\"SOLID principles\" title=\"SOLID principles\" /></p>\n\n<p>SOLID is an acronym that represents 5 principles for object-oriented programming. The principles are as follows:</p>\n\n<p><strong>S</strong>ingle Responsibility Principle: a class should have one and only one responsibility;\n<strong>O</strong>pen/Closed Principle: a class must be open to extension, but closed to modifications.\n<strong>L</strong>iskov Substitution Principle: an instance of T could be replaced by an instance of G, if G is a subtype of T, without affecting the coherence of the program.\n<strong>I</strong>nterface Segregation Principle: this principle says that is preferable to have many interfaces that are specifics for each client than having one general interface for everybody.\n<strong>D</strong>ependency Inversion: it says it’s better to be dependent on abstractions than implementations.</p>\n\n<p>This is the hard part when it comes to Defensive Programming: writing a good code. SOLID is one of those things that many people know, but few put into practice.</p>\n\n<h2 id=\"5---write-tests\">5 - Write tests</h2>\n\n<p>Unit tests are proven to be one of the best ways for developers to improve the quality of their code, the tests are especially useful when refactoring code, as the tests will assure that, even though the code changes, the behavior is still the expected. Writing unit tests will help us test modules, but also help us to check how we structured our objects because some ways to write code produces codes more easy to test than others.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Creating a system that deals perfectly well with any kind of situations is not an easy task, there are an enormous amount of paths that a user can take inside a system, but, it’s our job to ensure that as many of them as possible will be free of problems. Defensive programming is a good way to improve the overall quality of the code.</p>\n"
      } 
   ,
   
     {
       
          "title"    : "+Arduino Control",
          "category" : "",
          "tags"     : " ",
          "url"      : "/teste/portfolio/01-plus-arduino-control",
          "date"     : "September 7, 2018",
          "excerpt"  : null,
          "content"  : null
       
     } ,
   
     {
       
          "title"    : "Kotlin Reference - Offline reference for Kotlin",
          "category" : "",
          "tags"     : " ",
          "url"      : "/teste/portfolio/02-kotlin-reference",
          "date"     : "September 7, 2018",
          "excerpt"  : null,
          "content"  : null
       
     } ,
   
     {
       
          "title"    : "Cross-multiplication - Calculator",
          "category" : "",
          "tags"     : " ",
          "url"      : "/teste/portfolio/03-cross-multiplication-calculator",
          "date"     : "September 7, 2018",
          "excerpt"  : null,
          "content"  : null
       
     } 
   
  
]